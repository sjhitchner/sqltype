package main

import (
	"bytes"
	"flag"
	"fmt"
	//	pickle "github.com/hydrogen18/stalecucumber"
	"github.com/pkg/errors"
	"go/build"
	"go/format"
	"io"
	"log"
	"os"
	"strings"
	"text/template"
)

// value is one of these
//    int64
//    float64
//    bool
//    []byte
//    string
//    time.Time
//    nil - for NULL values

/*

)


func (t *{{ .Type }}) Scan(value interface{}) error {
	s, ok := value.({{ .Primative }})
	if !ok {
		return fmt.Errorf("Can't convert %v to {{ .Primative }}", value)
	}

	*t = {{ .Type }}(s)
	return nil
}

func (t {{ .Type }}) Value() (driver.Value, error) {
	return {{ .Primative }}(t), nil
}
*/

const StringTemplate = ``

const ScannerTemplate = `
// DO NOT EDIT - Auto generated by sqltype for {{ .Type }}

package {{ .Package }}

import (
	"fmt"
	"reflect"
	"database/sql/driver"
	{{if or (eq .Primative "int") (eq .Primative "bool") }}
	"strconv"
	{{end}}
	{{if or (eq .Primative "pythondict") (eq .Primative "pythonlist") }}
	"bytes"
	pickle "github.com/hydrogen18/stalecucumber"
	{{else if eq .Primative "pythonlist"}}
	"bytes"
	pickle "github.com/hydrogen18/stalecucumber"
	{{end}}
)

func (t *{{ .Type }}) Scan(value interface{}) error {

	if value == nil {
		return nil
	}
	
	switch v := value.(type) {
	{{if eq .Primative "string"}}
		case []byte:
			*t = {{ .Type }}(string(v))

		case string:
			*t = {{ .Type }}(v)

		case *string:
			*t = {{ .Type }}(*v)

	{{else if eq .Primative "int"}}
		case []byte:
			i, err := strconv.Atoi(string(v))
			if err != nil {
				return fmt.Errorf("%s Can't convert '%v' to int %v", reflect.TypeOf(t), value, err)
			}
			*t = {{ .Type }}(i)

		case int:
			*t = {{ .Type }}(v)

		case *int:
			*t = {{ .Type }}(*v)

	{{else if eq .Primative "bool"}}
		case []byte:
			b, err := strconv.ParseBool(string(v))
			if err != nil {
				return fmt.Errorf("%s Can't convert '%v' to bool %v", reflect.TypeOf(t), value, err)
			}
			*t = {{ .Type }}(b)

		case bool:
			*t = {{ .Type }}(v)

		case *bool:
			*t = {{ .Type }}(*v)

	{{else if eq .Primative  "pythondict"}}
		case []byte:
			dict, err := pickle.DictString(pickle.Unpickle(bytes.NewReader(v)))
			if err != nil {
				return fmt.Errorf("%s Can't convert '%v' to dict %v", reflect.TypeOf(t), value, err)
			}
			*t = {{ .Type }}(dict)

	{{else if eq .Primative  "pythonlist"}}
		case []byte:
			list := make({{ .Type }},0)
			err := pickle.UnpackInto(&list).From(pickle.Unpickle(bytes.NewReader(v)))
			if err != nil {
				return fmt.Errorf("%s Can't convert '%v' to list %v", reflect.TypeOf(t), value, err)
			}
			*t = list

	{{end}}
		default:
			return fmt.Errorf("%s Can't convert '%v' to {{ .Primative }}", reflect.TypeOf(t), value)
	}

	return nil
}

func (t {{ .Type }}) Value() (driver.Value, error) {

	{{if or (eq .Primative "pythondict") (eq .Primative "pythonlist") }}
		buf := new(bytes.Buffer)
		if _, err := pickle.NewPickler(buf).Pickle(t); err != nil {
			return nil, err
		}
		return buf.Bytes(), nil
	{{else}}
		return {{ .Primative }}(t), nil
	{{end}}
}
`

/*
	if value != nil {
		 return nil
	}

	switch v := value.(type) {
	case string:
		*t = {{ .Type }}(v)
		return nil
	case []byte:
		*t = {{ .Type }}(v)
		return nil
	case nil:
		return nil
	default:
		return fmt.Errorf("{{ .Type }}: Underlying value %v is not convertable to a string", reflect.TypeOf(value))
	}
}
*/

type Scanner struct {
	Package   string
	Primative string
	Type      string
}

var (
	primativeType string
	typeName      string
)

func init() {
	flag.StringVar(&primativeType, "primative", "", "Corresponding primative type")
	flag.StringVar(&typeName, "type", "", "Name of type")
}

func main() {
	log.SetFlags(0)
	flag.Parse()

	if typeName == "" {
		log.Fatal("Need to provide --type")
	}

	if primativeType == "" {
		log.Fatal("Need to provide --primative")
	}

	packageName, err := getPackageName()
	if err != nil {
		log.Fatal(err)
	}

	if err := validatePrimative(primativeType); err != nil {
		log.Fatal(err)
	}

	scanner := Scanner{
		Package:   packageName,
		Primative: primativeType,
		Type:      typeName,
	}

	filename := fmt.Sprintf("sql_%s.go", strings.ToLower(typeName))
	file, err := os.Create(filename)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	if err := SqlType(file, scanner); err != nil {
		log.Fatal(err)
	}
}

func SqlType(writer io.Writer, scanner Scanner) error {
	t := template.Must(template.New("scanner").Parse(ScannerTemplate))

	buf := &bytes.Buffer{}
	if err := t.Execute(buf, scanner); err != nil {
		return errors.Wrap(err, "error excuting template")
	}

	b, err := format.Source(buf.Bytes())
	if err != nil {
		return errors.Wrap(err, "error sourcing go struct")
	}

	if _, err := writer.Write(b); err != nil {
		return errors.Wrap(err, "error writing to file")
	}

	return nil
}

func getPackageName() (string, error) {
	directory := "."

	pkg, err := build.Default.ImportDir(directory, 0)
	if err != nil {
		return "", err
	}

	return pkg.Name, err
}

func validatePrimative(primativeType string) error {
	switch primativeType {
	case "string":
		fallthrough
	case "bool":
		fallthrough
	case "pythondict":
		fallthrough
	case "pythonlist":
		return nil
	default:
		return errors.Errorf("Invalid primative '%s'", primativeType)
	}
}

/*
func (t *{{ .Type }}) Scan(value interface{}) error {
	fmt.Println("VALUE", value, reflect.TypeOf(value))

	s, err := ConvertString(value)
	if err != nil {
		return errors.Wrapf(err, "%s Can't convert '%v' to string %s", reflect.TypeOf(t), value, s)
	}
	*t = RewardTargetId(s)
	return nil
}

func (t RewardTargetId) Value() (driver.Value, error) {
	return string(t), nil
}

func ConvertString(value interface{}) (string, error) {
	switch t := value.(type) {
	case string:
		return t, nil
	case []byte:
		return string(t), nil
	case nil:
		return "", nil
	default:
		return "", errors.Errorf("Underlying value %v is not a string")
	}
}

func ConvertInt(value interface{}) (string, error) {
	switch t := value.(type) {
	case string:
		return t, nil
	case []byte:
		return string(t), nil
	case nil:
		return "", nil
	default:
		return "", errors.Errorf("Underlying value %v is not a string")
	}
}

func ConvertFloat(value interface{}) (string, error) {
	switch t := value.(type) {
	case string:
		return t, nil
	case []byte:
		return string(t), nil
	case nil:
		return "", nil
	default:
		return "", errors.Errorf("Underlying value %v is not a string")
	}
}

func ConvertBool(value interface{}) (bool, error) {
	b, err := driver.Bool.ConvertValue(value)
	if err != nil {
		return err
	}
	return b.(bool)
}

func (t *StringList) Scan(value interface{}) error {

	if value == nil {
		return nil
	}

	buf, ok := value.([]byte)
	if !ok {
		return errors.Errorf("%s Can't cast '%v' to []byte", reflect.TypeOf(t), value)
	}

	reader := bytes.NewReader(buf)

	list, err := pickle.ListOrTuple(pickle.Unpickle(reader))
	if err != nil {
		return errors.Wrapf(err, "%s Can't convert '%v' to list", reflect.TypeOf(t), value)
	}

	fmt.Println("LIST", list)

	slist := make([]string, 0, len(list))
	for _, l := range list {
		slist = append(slist, l.(string))
	}
	*t = slist
	return nil
}

func (t StringList) Value() (driver.Value, error) {
	buf := new(bytes.Buffer)
	if _, err := pickle.NewPickler(buf).Pickle(t); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (t StringListList) Value() (driver.Value, error) {
	buf := new(bytes.Buffer)
	if _, err := pickle.NewPickler(buf).Pickle(t); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
*/
